module wayland_struct.protocol2;

import wayland_struct.proxy : wl_proxy;
import wayland_struct.proxy : wl_proxy_marshal;
import wayland_struct.proxy : wl_proxy_marshal_constructor;
import wayland_struct.proxy : wl_proxy_marshal_constructor_versioned;
import wayland_struct.proxy : wl_proxy_get_version;
import wayland_struct.proxy : wl_proxy_add_listener;
import wayland_struct.proxy : wl_proxy_destroy;
import wayland_struct.util  : wl_proxy_callback;;
import wayland_struct.util  : wl_message;
import wayland_struct.util  : wl_interface;
import wayland_struct.util  : wl_fixed_t;
import wayland_struct.util  : wl_array;

//extern (C) __gshared wl_interface wl_registry_interface;
//extern (C) const wl_interface wl_registry_interface = {
//        "wl_registry", 1,
//        1, wl_registry_requests.ptr,
//        2, wl_registry_events.ptr,
//};
//static const wl_message[1] wl_registry_requests = [
//        wl_message ("bind", "usun", wayland_types.ptr + 0),
//];
//static const wl_message[2] wl_registry_events = [
//        wl_message ("global", "usu", wayland_types.ptr + 0),
//        wl_message ("global_remove", "u", wayland_types.ptr + 0),
//];
//static const wl_interface*[3] wayland_types = [  // all interfaces
//        null,
//        null,
//        null,
//];

extern (C) __gshared wl_interface wl_registry_interface;

struct
wl_registry {
    wl_proxy* _proxy;
    alias _proxy this;

    Listener default_listener;

    // Requests
    pragma (inline,true):
    auto bind (uint name) { 
        return cast (wl_proxy*) 
            wl_proxy_marshal_constructor (
                _proxy, opcode.bind, &wl_registry_interface, name
            );
    }

    // Events
    struct
    Listener {  // is a vector of function pointers. 
        global_cb        global        = &global_impl;
        global_remove_cb global_remove = &global_remove_impl;

        alias global_cb        = extern (C) void function (void* data, wl_registry* _wl_registry, uint name, const(char)* interface_, uint version_);
        alias global_remove_cb = extern (C) void function (void* data, wl_registry* _wl_registry, uint name);
    }

    // impl
    extern (C)
    static
    void 
    global_impl (void* data, wl_registry* _wl_registry, uint name, const(char)* interface_, uint version_) {
        //
    }

    extern (C)
    static
    void 
    global_remove_impl (void* data, wl_registry* _wl_registry, uint name) {
        //
    }

    // Proxy
    // Event listener
    auto 
    add_listener (Listener* impl, void* data) { 
        return wl_proxy_add_listener (
            _proxy, 
            cast (wl_proxy_callback*) impl,  // vector of function pointers
            data
        ); 
    }
    
    void 
    destroy () {
        wl_proxy_destroy (_proxy);
    }

    // Opcodes
    enum
    opcode : uint {
        bind = 0,
    }
}

struct
wl_callback {
    //
}

