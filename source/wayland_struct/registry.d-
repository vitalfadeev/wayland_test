module wayland_struct.registry;
version (NEVER):
import wayland_struct.proxy : wl_proxy;
import wayland_struct.proxy : wl_proxy_marshal_flags,wl_proxy_get_version;
import wayland_struct.util  : wl_message;
import wayland_struct.util  : wl_interface;
import wayland_struct.util  : wl_fixed_t;
import wayland_struct.util  : wl_array;

struct
wl_registry {
  wl_proxy _super;
  alias _super this;

  // Requests
  pragma (inline,true):
  auto bind (uint name) { return wl_proxy_marshal_flags (&this, opcode.bind, &interface_, wl_proxy_get_version (&this), 0, null, name);  }

  // Events
  struct
  Listener {
    global_cb global;
    global_remove_cb global_remove;

    alias global_cb = void function (void* data, wl_registry* _wl_registry, uint name, string interface_, uint version_);
    alias global_remove_cb = void function (void* data, wl_registry* _wl_registry, uint name);
  }

  // Opcodes
  enum
  opcode : uint {
    bind = 0,
  }

  // Interface
  static const wl_message[1] _requests  = [wl_message ()];
  static const wl_message[1] _events    = [wl_message ()];
  static const wl_interface interface_ = {
    "wl_registry", 1,
    1, _requests.ptr,
    2, _events.ptr
  };
}
